version: "3.9"

services:
  db:
    image: postgres:15
    container_name: lime_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: limeuser
      POSTGRES_PASSWORD: strongpassword
      POSTGRES_DB: limedb
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - internal

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: api
    restart: unless-stopped
    depends_on:
      - db
    expose:
      - "8000"
    environment:
      DATABASE_URL: "postgres://limeuser:strongpassword@db:5432/limedb"
    networks:
      - internal
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.hobbyhosting.org`)"
      - "traefik.http.routers.api.entrypoints=web"
      - "traefik.http.services.api.loadbalancer.server.port=8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 10s
      timeout: 5s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_BASE: "http://api.hobbyhosting.org"
    container_name: lime_frontend
    restart: unless-stopped
    networks: [proxy]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`hobbyhosting.org`) || Host(`www.hobbyhosting.org`)"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"

  traefik:
    image: traefik:latest
    container_name: traefik
    restart: unless-stopped
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"   # only pick up containers we label
      - "--entrypoints.web.address=:80"
      - "--api.insecure=true"
      - "--log.level=DEBUG"
      - "--serversTransport.forwardingTimeouts.dialTimeout=30s"
      - "--serversTransport.forwardingTimeouts.responseHeaderTimeout=30s"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - proxy

volumes:
  postgres_data:

networks:
  internal:
    driver: bridge
  proxy:
    driver: bridge
