version: "3.9"

services:
# ────────────────────────────────────────── DB
  db:
    image: postgres:15
    container_name: lime_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: limeuser
      POSTGRES_PASSWORD: strongpassword
      POSTGRES_DB: limedb
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks: [internal]

# ────────────────────────────────────────── API
  backend:
    build:
      context: ./backend
    container_name: api                        # short simple name
    restart: unless-stopped
    depends_on: [db]
    expose:                                   # ← let Traefik reach 8000 internally
      - "8000"
    environment:
      DATABASE_URL: postgres://limeuser:strongpassword@db:5432/limedb
    networks: [internal, proxy]
    labels:
      traefik.enable: "true"
      traefik.http.routers.api.rule: "Host(`api.hobbyhosting.org`)"
      traefik.http.routers.api.entrypoints: "web"
      traefik.http.services.api.loadbalancer.server.port: "8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3

# ────────────────────────────────────────── SPA
  frontend:
    build:
      context: ./frontend
      args:
        VITE_API_BASE: "http://api.hobbyhosting.org"  # picked up at build-time
    container_name: lime_frontend
    restart: unless-stopped
    networks: [proxy]
    labels:
      traefik.enable: "true"
      traefik.http.routers.frontend.rule: "Host(`hobbyhosting.org`,`www.hobbyhosting.org`)"
      traefik.http.routers.frontend.entrypoints: "web"
      traefik.http.services.frontend.loadbalancer.server.port: "3000"

# ────────────────────────────────────────── Traefik
  traefik:
    image: traefik:latest
    container_name: traefik
    restart: unless-stopped
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--api.insecure=true"          # dashboard on :8080
      - "--log.level=DEBUG"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks: [proxy]

volumes:
  postgres_data:

networks:
  internal:
    driver: bridge
  proxy:
    driver: bridge
